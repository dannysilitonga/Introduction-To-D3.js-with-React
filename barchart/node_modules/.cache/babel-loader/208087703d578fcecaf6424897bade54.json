{"ast":null,"code":"import * as d3 from 'd3';\nconst MARGIN = {\n  TOP: 30,\n  BOTTOM: 300,\n  LEFT: 90,\n  RIGHT: 30\n};\nconst WIDTH = 860 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 800 - MARGIN.TOP - MARGIN.BOTTOM;\nconst marginTop = 10;\nconst marginRight = 10;\nconst marginBottom = 20;\nconst marginLeft = 40;\nexport default class D3Chart {\n  constructor(element) {\n    const vis = this;\n\n    //vis.svg = d3.select(element)\n    //\t.append(\"svg\")\n    //\t\t.attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n    //\t\t.attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n    //\t.append(\"g\")\n    //\t\t.attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n    //vis.svg = d3.create(\"svg\")\n    //\t\t.attr(\"width\", WIDTH)\n    //\t\t.attr(\"height\", HEIGHT)\n    //\t.attr(\"viewBox\", [0,0, WIDTH,HEIGHT])\n    //\t.attr(\"style\", \"max-width: 100%, height: auto;\");\n\n    //vis.xLabel = vis.svg.append(\"text\")\n    //\t.attr(\"x\", WIDTH / 2)\n    //\t.attr(\"y\", HEIGHT + 80)\n    //\t.attr(\"text-anchor\", \"middle\")\n    //\t.style(\"font-size\", \"19px\")\n\n    //vis.svg.append(\"text\")\n    //\t.attr(\"x\", -(HEIGHT / 2))\n    //\t.attr(\"y\", -75)\n    //\t.attr(\"text-anchor\", \"middle\")\n    //\t.text(\"Number of Views\")\n    //\t.attr(\"transform\", \"rotate(-90)\")\n\n    //vis.xAxisGroup = vis.svg.append(\"g\")\n    //\t\t.attr(\"transform\", `translate(0, ${HEIGHT})`)\n\n    //vis.yAxisGroup = vis.svg.append(\"g\")\n\n    Promise.all([d3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_15_03.json\"), d3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_22_03.json\"), d3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_29_03.json\"), d3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_05_04.json\"), d3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_15_04.json\")]).then(datasets => {\n      console.log(datasets[0]['US']);\n      var polarityCount = countPolarity(datasets[0]);\n      console.log(\"the polarity count is\", polarityCount);\n\n      //const march15DataTemp2 = countPolarity(datasets[0])\n      //const march22DataTemp2 = countPolarity(datasets[1])\n      //const march29DataTemp2 = countPolarity(datasets[2])\n      //const april05DataTemp2 = countPolarity(datasets[3])\n      //const april15DataTemp2 = countPolarity(datasets[4])\n      //console.log(\"the march polarity data\", march15DataTemp2)\n\n      const march15DataRestructured = restrucOrigData(datasets[0]);\n      const march15DataTemp = getPolarityCount(march15DataRestructured);\n      const march22DataRestructured = restrucOrigData(datasets[1]);\n      const march22DataTemp = getPolarityCount(march22DataRestructured);\n      const march29DataRestructured = restrucOrigData(datasets[2]);\n      const march29DataTemp = getPolarityCount(march29DataRestructured);\n      const april05DataRestructured = restrucOrigData(datasets[3]);\n      const april05DataTemp = getPolarityCount(april05DataRestructured);\n      const april15DataRestructured = restrucOrigData(datasets[4]);\n      const april15DataTemp = getPolarityCount(april15DataRestructured);\n      console.log(\"march 15 Data\", march15DataTemp);\n      vis.march15Data = reorganizeData(march15DataTemp).slice(0, 20); // march15DataTemp.slice(0, 20); //\n      //vis.march15Data = reorganizeData(march15DataTemp.slice(0, 20); // march15DataTemp.slice(0, 20); //\n      vis.march22Data = reorganizeData(march22DataTemp).slice(0, 20); //march22DataTemp.slice(0, 20); //\n      vis.march29Data = reorganizeData(march29DataTemp).slice(0, 20); //march29DataTemp.slice(0, 20); //reorganizeData(march29DataTemp).slice(0, 20);\n      vis.april05Data = reorganizeData(april05DataTemp).slice(0, 20); //april05DataTemp.slice(0, 20); // reorganizeData(april05DataTemp).slice(0, 20);\n      vis.april15Data = reorganizeData(april15DataTemp).slice(0, 20); //april15DataTemp.slice(0, 20); //reorganizeData(april15DataTemp).slice(0, 20);\n\n      console.log(\"april15Data\", vis.april15Data);\n      console.log(\"Number of Positive Comments from first video is \", vis.march15Data.find(item => item.videoID === \"0AW21jPu-Wc\")['sentimentData'].find(item => item.analysis === \"Positive\")['count']);\n      console.log(\"The categories of sentiments are \", vis.march15Data.find(item => item.videoID === \"0AW21jPu-Wc\")['sentimentData']);\n      var dataExp = {};\n\n      //var dataExp.map(( d = )\n      //\tNegativeSetimentCount:vis.march15Data.flatMap(videoID => [videoID['sentimentData'].find(item => item.analysis ==\"Negative\")['count']]) \n      //} \n      //vis.march15Data.flatMap(videoID => [videoID['sentimentData'].find(item => item.analysis ==\"Negative\")['count']])\n\n      console.log(\"experimental reorg\", vis.march15Data.flatMap(a => [a.sentimentData.map(b => [b.analysis, b.count, a.videoID])])); //.map(c =>c.Negative)]));  //concat(a)] )); //[ a.sentimentData.concat(a)] ));\n      console.log(\"experimental reorg2\", vis.march15Data[0]['sentimentData'].find(item => item.analysis == \"Negative\")['count']);\n      console.log(\"experimental reorg3\", vis.march15Data.forEach(videoID => [videoID.negativeSentiment = videoID['sentimentData'].find(item => item.analysis == \"Negative\")['count']]));\n      console.log(\"experimental reorg4\", vis.march15Data.flatMap(videoID => ({\n        NegativeCount: [videoID['sentimentData'].find(item => item.analysis == \"Negative\")['count']]\n      })));\n      console.log(\"experimental reorg5\", dataExp);\n      //console.log(\"experimental reorg5\", vis.march15Data.flatMap( a => [ a.sentimentData.map(b => [{b.analysis: b.count}, a.videoID] )]))\n\n      const children = [];\n      vis.march15Data.forEach(item => {\n        const dataExp = {\n          videoID: item.videoID,\n          negativeSentimentCount: item.sentimentData.find(item => item.analysis == \"Negative\")['count'],\n          neutralSentimentCount: item.sentimentData.find(item => item.analysis == \"Neutral\")['count'],\n          positiveSentimentCount: item.sentimentData.find(item => item.analysis == \"Positive\")['count']\n        };\n        children.push(dataExp);\n      });\n      console.log(\"experimental reorg5\", children);\n      //console.log(\"nexperimental reorg6\", vis.march15Data.flatMap(\n      //\t(elem) =>elem.sentimentData\n      //\t)\n      //)\n\n      //const fn = arr => arr.flatMap(({ sentimentData, ...rest }) =>\n      //\tsentimentData.map( o => ({\n      //\t\t\t...rest,\n      //\t\t\t...o\n      //\t\t}))\n      //\t)\n      //const DataExp2 = vis.march15Data.map(({ videoID, sentimentData }) =>\n      //\tsentimentData.map( {o => ({\n      //\t\t...rest,\n      //\t\t...o\n      //\t}))\n      //)\n\n      //console.log('expiremental reorg5', DataExp2)\n\n      //var newData = [];\n      //for(const videoID in vis.march15Data) {\n      //\tnewData.push({\n      //\t//videoTitle: videoID,\n      //\tnegativeSentiment: vis.march15Data.map(videoID => [videoID['sentimentData'].find(item => item.analysis ==\"Negative\")['count']])\n      //\t});\n      //}\n      //console.log(\"the new exp reorg4\", newData)\n      const data = vis.march15Data;\n      // Determine the series that need to be stacked.\n      const series = d3.stack().keys(d3.union(data.map(d => d.analysis))) // distinct series keys, in input order\n      .value((_ref, key) => {\n        let [, D] = _ref;\n        return D.get(key).count;\n      }) // get value for each series key and stack\n      (d3.index(data, d => d.videoID, d => d.analysis));\n\n      //Prepare the scales for positional and color encodings.\n      const x = d3.scaleBand().domain(d3.groupSort(data, D => -d3.sum(D, d => d.count), d => d.videoID)).range([marginLeft, WIDTH - marginRight]).padding(0.1);\n      const y = d3.scaleLinear().domain([0, d3.max(series, d => d3.max(d, d => d[1]))]).rangeRound([HEIGHT - marginBottom, marginTop]);\n      const color = d3.scaleOrdinal().domain(series.map(d => d.key)).range(d3.schemeSpectral[series.length]).unknown(\"#cc\");\n\n      //A function to format the value in the tooltip.\n      const formatValue = x => isNaN(x) ? \"N/A\" : x.toLocaleString(\"en\");\n\n      //Create the SVG container\n      vis.svg = d3.create(\"svg\").attr(\"width\", WIDTH).attr(\"height\", HEIGHT).attr(\"viewBox\", [0, 0, WIDTH, HEIGHT]).attr(\"style\", \"max-width: 100%, height: auto;\");\n\n      //Append a group for each series, and a rect for each element in the series.\n      vis.svg.append(\"g\").selectAll().data(series).join(\"g\").attr(\"fill\", d => color(d.key)).selectAll(\"rect\").data(D => D.map(d => (d.key = D.key, d))).join(\"rect\").attr(\"x\", d => x(d.data[0])).attr(\"y\", d => y(d[1])).attr(\"height\", d => y(d[0]) - y(d[1])).attr(\"width\", x.bandwidth()).append(\"title\").text(d => \"\".concat(d.data[0], \" \").concat(d.key, \"\\n\").concat(formatValue(d.data[1].get(d.key).count)));\n\n      //Append the horizontal axis\n      vis.svg.append(\"g\").attr(\"transform\", \"translate(0,\".concat(HEIGHT - marginBottom, \")\")).call(d3.axisBottom(x).tickSizeOuter(0)).call(g => g.selectAll('.domain').remove());\n\n      //Append the vertical axis\n      vis.svg.append(\"g\").attr(\"transform\", \"translate($marginLeft},0)\").call(g => g.selectAll(\".domain\").remove());\n\n      // vis.update(\"march15\")\n    });\n  }\n  update(date) {\n    const vis = this;\n\n    //vis.data = (date == \"march15\") ? vis.march15Data : vis.april15Data;\n\n    if (date == \"march15\") vis.data = vis.march15Data;else if (date == \"march22\") vis.data = vis.march22Data;else if (date == \"march29\") vis.data = vis.march29Data;else if (date == \"april05\") vis.data = vis.april05Data;else if (date == \"april15\") vis.data = vis.april15Data;\n    const month = date.slice(0, -2).charAt(0).toUpperCase() + date.slice(0, -2).slice(1);\n    const convertedDate = date.substr(date.length - 2);\n    const converted_month_date = month.concat(\" \", convertedDate);\n\n    //console.log(\"converted date month\", converted_month_date)\n\n    //vis.xLabel.text(`Top Trending Videos on ${converted_month_date}`)\n\n    //console.log(\"the video data\", vis.data)\n\n    const sentimentCategories = ['Negative', 'Neutral', 'Positive'];\n    console.log(\"sentimentCategories\", sentimentCategories);\n\n    // Determine the series that need to be stacked.  \n    //const series = d3.stack()\n    //\t\t.keys(d3.union(vis.data.map(d=>d)))\n    //console.log(\"the new data\", vis.data.map(d=>d.sentimentData).map(d=>d.analysis))\n\n    const x = d3.scaleBand().range([0, WIDTH])\n    //.domain(vis.data.map((d) => d.videoID))\n    .domain(d3.groupSort(vis.data, D => -d3.sum(D, d => d.count), d => d.videoID)).padding(0.5);\n\n    // const xAxisCall = d3.axisBottom(x)\n\n    //vis.xAxisGroup.transition().duration(500).call(xAxisCall)\n    //\t.selectAll(\"text\")\n    //\t.style(\"font-size\", \"8px\")\n    //\t.attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n    //\t.style(\"text-anchor\", \"end\")\n\n    //const y = d3.scaleLinear()\n    //\t.domain([\n    // \td3.min(vis.data, d => d.videoCount) *0.95, \n    //  \td3.max(vis.data, d => d.videoCount)\n    //\t])\n    //\t.range([HEIGHT, 0])\n\n    //console.log(d3);\t\n\n    const series = d3.stack().keys(d3.union(vis.data.map(d => d.analysis))) // distinct series keys, in input order\n    .value((_ref2, key) => {\n      let [, D] = _ref2;\n      return D.get(key).count;\n    }) // get value for each series key adn stack\n    (d3.index(vis.data, d => d.videoID, d => d.analysis));\n    const y = d3.scaleLinear().domain([0, d3.max(series, d => d3.max(d, d => d[1]))]).rangeRound([HEIGHT, 0]);\n\n    //const yAxisCall = d3.axisLeft(y)\n    //vis.yAxisGroup.transition().duration(500).call(yAxisCall)\n    //console.log(\"hello again\")\n\n    //color palette = one color per subgroup\n    const color = d3.scaleOrdinal().domain(series.map(d => d.key)).range(d3.schemeSpectral[series.length]).unknown(\"#ccc\");\n    const formatValue = x => isNaN(x) ? \"N/A\" : x.toLocaleString(\"en\");\n\n    // DATA JOIN\n    const rects =\n    //Append a group for each series, and a rect for each element in the series.\n    vis.svg.append(\"g\").selectAll().data(series).join(\"g\").attr(\"fill\", d => color(d.key)).selectAll(\"rect\").data(D => D.map(d => (d.key = D.key, d))).join(\"rect\").attr(\"x\", d => x(d.data[0])).attr(\"y\", d => y(d[1])).attr(\"height\", d => y(d[0]) - y(d[1])).attr(\"width\", x.bandwidth()).append(\"title\").text(d => \"\".concat(d.data[0], \" \").concat(d.key, \"\\n\").concat(formatValue(d.data[1].get(d.key).count)));\n\n    // EXIT \n    rects.exit().transition().duration(500).attr(\"height\", 0).attr(\"y\", HEIGHT).remove();\n\n    // UPDATE \n    rects.transition().duration(500).attr(\"x\", d => x(d.videoTitle)).attr(\"y\", d => y(d.videoCount)).attr(\"width\", x.bandwidth).attr(\"height\", d => HEIGHT - y(d.videoCount));\n\n    // ENTER\n    rects.enter().append(\"rect\").attr(\"x\", d => x(d.videoTitle)).attr(\"width\", x.bandwidth).attr(\"fill\", \"#5f0f40\").attr(\"y\", HEIGHT).transition().duration(500).attr(\"height\", d => HEIGHT - y(d.videoCount)).attr(\"y\", d => y(d.videoCount));\n  }\n}\nfunction restructureData(raw_data) {\n  var USAVideoCount = [];\n  for (const videoID in raw_data['US']) {\n    USAVideoCount.push({\n      videoTitle: videoID,\n      videoCount: Number(raw_data['US'][videoID]['view_count'])\n    });\n  }\n  USAVideoCount = USAVideoCount.sort((a, b) => a.videoCount < b.videoCount ? 1 : -1);\n  return USAVideoCount;\n}\nfunction countPolarity(rawData) {\n  var polarityCount = [];\n  var obj = {};\n  var countP = 0;\n  var countN = 0;\n  var countNe = 0;\n  for (const videoID in rawData['US']) {\n    for (const user in rawData['US'][videoID]) {\n      if (rawData['US'][videoID][user]['Analysis'] == 'Positive') obj[countP] = (obj[countP] || 0) + 1;else if (rawData['US'][videoID][user]['Analysis'] == 'Neutral') obj[countNe] = (obj[countNe] || 0) + 1;else if (rawData['US'][videoID][user]['Analysis'] == 'Negative') obj[countN] = (obj[countN] || 0) + 1;\n    }\n    polarityCount.push({\n      videoID: videoID,\n      polarityPositive: Number(obj[countP]),\n      polarityNeutral: Number(obj[countNe]),\n      polarityNegative: Number(obj[countN])\n    });\n    countP = 0;\n    countN = 0;\n    countNe = 0;\n    return polarityCount;\n  }\n}\nfunction countPolarity2(rawData) {\n  for (const videoID in rawData['US']) {\n    const out = Object.values(rawData['US'][videoID].reduce((acc, _ref3) => {\n      let {\n        current\n      } = _ref3;\n      //Destructure the properites from the current object\n      const {\n        videoID,\n        Analysis\n      } = current;\n      //If the object doesn't already contain an Analysis key set up a new object with\n      // empty \n      acc[videoID] = acc[videoID] || {\n        videoID,\n        Analysis: []\n      };\n\n      // Push the analysis of the current object to analysis array\n      acc[videoID].Analysis.push(Analysis);\n\n      // Return the accumulator for the next iteration\n      return acc;\n    }, {}));\n  }\n  //return acc;\n}\nfunction restrucOrigData(rawData) {\n  const newData = [];\n  for (const videoID in rawData['US']) {\n    for (const user in rawData['US'][videoID]) {\n      newData.push({\n        videoID: videoID,\n        user: user,\n        analysis: rawData['US'][videoID][user]['Analysis'],\n        comments: rawData['US'][videoID][user]['Comments'],\n        polarity: rawData['US'][videoID][user]['Polarity']\n      });\n    }\n  }\n  return newData;\n}\nfunction restrucNewData(rawData) {\n  const newData = [];\n  for (const videoID in rawData) {\n    newData.push({\n      videoID: rawData['videoID'],\n      negative: rawData['sentimentData'].map(e => e.analysis) //['analysis']['Negative'].map(d=>d.count)\n    });\n  }\n}\nfunction getPolarityCount(rawData) {\n  const res = rawData.reduce((acc, obj) => {\n    const existingIndex = acc.findIndex(el => el.videoID == obj.videoID && el.analysis == obj.analysis);\n    if (existingIndex > -1) {\n      acc[existingIndex].count += 1;\n    } else {\n      acc.push({\n        videoID: obj.videoID,\n        analysis: obj.analysis,\n        count: 1\n      });\n    }\n    return acc;\n  }, []);\n  return res;\n}\nfunction reorganizeData(polarityData) {\n  const result = [...polarityData.reduce((acc, _ref4) => {\n    let {\n      videoID,\n      analysis,\n      count\n    } = _ref4;\n    const group = acc.get(videoID);\n    //group ? group.sentimentData.push({analysis, count}) : acc.set(videoID, {videoID, \"sentimentData\":[{analysis, count}]})\n    group ? group.sentimentData.push({\n      analysis,\n      count\n    }) : acc.set(videoID, {\n      videoID,\n      \"sentimentData\": [{\n        analysis,\n        count\n      }]\n    });\n    return acc;\n  }, new Map()).values()];\n  return result;\n}\n\n/*\nfunction countPolarity2(rawData){\n\tvar polarityCount = [];\n\tvar temp = [rawData[0]];\n\tfor (const index = 1; index < rawData.length; index++){  //videoID in rawData['US']){\n\t\tfor (const  subindex = 1; subindex < index.length; subindex++){ //user in rawData['US'][videoID]){\n\t\t\tif ( rawData[index][subindex] == rawData[index -1][subindex -1] + 1) { //rawData['US'][videoID][user]['Analysis'] == 'Positive'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countP += 1\n\t\t\t\t})\n\t\t\t} else \n\t\t\tif (rawData['US'][videoID][user]['Analysis'] == 'Neutral'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countN += 1\n\t\t\t\t})\n\t\t\t} else \n\t\t\tif (rawData['US'][videoID][user]['Analysis'] == 'Negative'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countNe += 1\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\treturn polarityCount \n}\n*/","map":{"version":3,"names":["d3","MARGIN","TOP","BOTTOM","LEFT","RIGHT","WIDTH","HEIGHT","marginTop","marginRight","marginBottom","marginLeft","D3Chart","constructor","element","vis","Promise","all","json","then","datasets","console","log","polarityCount","countPolarity","march15DataRestructured","restrucOrigData","march15DataTemp","getPolarityCount","march22DataRestructured","march22DataTemp","march29DataRestructured","march29DataTemp","april05DataRestructured","april05DataTemp","april15DataRestructured","april15DataTemp","march15Data","reorganizeData","slice","march22Data","march29Data","april05Data","april15Data","find","item","videoID","analysis","dataExp","flatMap","a","sentimentData","map","b","count","forEach","negativeSentiment","NegativeCount","children","negativeSentimentCount","neutralSentimentCount","positiveSentimentCount","push","data","series","stack","keys","union","d","value","_ref","key","D","get","index","x","scaleBand","domain","groupSort","sum","range","padding","y","scaleLinear","max","rangeRound","color","scaleOrdinal","schemeSpectral","length","unknown","formatValue","isNaN","toLocaleString","svg","create","attr","append","selectAll","join","bandwidth","text","concat","call","axisBottom","tickSizeOuter","g","remove","update","date","month","charAt","toUpperCase","convertedDate","substr","converted_month_date","sentimentCategories","_ref2","rects","exit","transition","duration","videoTitle","videoCount","enter","restructureData","raw_data","USAVideoCount","Number","sort","rawData","obj","countP","countN","countNe","user","polarityPositive","polarityNeutral","polarityNegative","countPolarity2","out","Object","values","reduce","acc","_ref3","current","Analysis","newData","comments","polarity","restrucNewData","negative","e","res","existingIndex","findIndex","el","polarityData","result","_ref4","group","set","Map"],"sources":["/workspace/Introduction-To-D3.js-with-React/barchart/src/D3Stacked.js"],"sourcesContent":["import * as d3 from 'd3';\n\nconst MARGIN = { TOP: 30, BOTTOM: 300, LEFT: 90, RIGHT: 30 }\nconst WIDTH = 860 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 800 - MARGIN.TOP - MARGIN.BOTTOM;\nconst marginTop = 10;\n  const marginRight = 10;\n  const marginBottom = 20;\n  const marginLeft = 40;\n\nexport default class D3Chart {\n\tconstructor(element) {\n\t\tconst vis = this\n\n\t\t//vis.svg = d3.select(element)\n\t\t//\t.append(\"svg\")\n\t\t//\t\t.attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n\t\t//\t\t.attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n\t\t//\t.append(\"g\")\n\t\t//\t\t.attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n\t\t//vis.svg = d3.create(\"svg\")\n\t\t//\t\t.attr(\"width\", WIDTH)\n\t\t//\t\t.attr(\"height\", HEIGHT)\n\t\t//\t.attr(\"viewBox\", [0,0, WIDTH,HEIGHT])\n\t\t//\t.attr(\"style\", \"max-width: 100%, height: auto;\");\n\n\t\t//vis.xLabel = vis.svg.append(\"text\")\n\t\t//\t.attr(\"x\", WIDTH / 2)\n\t\t//\t.attr(\"y\", HEIGHT + 80)\n\t\t//\t.attr(\"text-anchor\", \"middle\")\n\t\t//\t.style(\"font-size\", \"19px\")\n\n\t\t//vis.svg.append(\"text\")\n\t\t//\t.attr(\"x\", -(HEIGHT / 2))\n\t\t//\t.attr(\"y\", -75)\n\t\t//\t.attr(\"text-anchor\", \"middle\")\n\t\t//\t.text(\"Number of Views\")\n\t\t//\t.attr(\"transform\", \"rotate(-90)\")\n\n\t\t//vis.xAxisGroup = vis.svg.append(\"g\")\n\t//\t\t.attr(\"transform\", `translate(0, ${HEIGHT})`)\n\n\t\t//vis.yAxisGroup = vis.svg.append(\"g\")\n\n\t\tPromise.all([\n\t\t\td3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_15_03.json\"),\n\t\t\td3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_22_03.json\"),\n\t\t\td3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_29_03.json\"),\n\t\t\td3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_05_04.json\"),\n\t\t\td3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_15_04.json\")\n\t\t]).then((datasets) => {\n\t\t\tconsole.log(datasets[0]['US'])\n\n\t\t\tvar polarityCount = countPolarity(datasets[0])\n\t\t\tconsole.log(\"the polarity count is\", polarityCount);\n\t\t\t\n\t\t\t//const march15DataTemp2 = countPolarity(datasets[0])\n\t\t\t//const march22DataTemp2 = countPolarity(datasets[1])\n\t\t\t//const march29DataTemp2 = countPolarity(datasets[2])\n\t\t\t//const april05DataTemp2 = countPolarity(datasets[3])\n\t\t\t//const april15DataTemp2 = countPolarity(datasets[4])\n\t\t\t//console.log(\"the march polarity data\", march15DataTemp2)\n\n\n\t\t\tconst march15DataRestructured = restrucOrigData(datasets[0])\n\t\t\tconst march15DataTemp = getPolarityCount(march15DataRestructured)\n\n\t\t\tconst march22DataRestructured = restrucOrigData(datasets[1])\n\t\t\tconst march22DataTemp = getPolarityCount(march22DataRestructured)\n\n\t\t\tconst march29DataRestructured = restrucOrigData(datasets[2])\n\t\t\tconst march29DataTemp = getPolarityCount(march29DataRestructured)\n\n\t\t\tconst april05DataRestructured = restrucOrigData(datasets[3])\n\t\t\tconst april05DataTemp = getPolarityCount(april05DataRestructured)\n\n\t\t\tconst april15DataRestructured = restrucOrigData(datasets[4])\n\t\t\tconst april15DataTemp = getPolarityCount(april15DataRestructured)\n\n\n\t\t\tconsole.log(\"march 15 Data\", march15DataTemp)\n\n\t\t\tvis.march15Data = reorganizeData(march15DataTemp).slice(0, 20); // march15DataTemp.slice(0, 20); //\n\t\t\t//vis.march15Data = reorganizeData(march15DataTemp.slice(0, 20); // march15DataTemp.slice(0, 20); //\n\t\t\tvis.march22Data = reorganizeData(march22DataTemp).slice(0, 20); //march22DataTemp.slice(0, 20); //\n\t\t\tvis.march29Data = reorganizeData(march29DataTemp).slice(0, 20); //march29DataTemp.slice(0, 20); //reorganizeData(march29DataTemp).slice(0, 20);\n\t\t\tvis.april05Data = reorganizeData(april05DataTemp).slice(0, 20); //april05DataTemp.slice(0, 20); // reorganizeData(april05DataTemp).slice(0, 20);\n\t\t\tvis.april15Data = reorganizeData(april15DataTemp).slice(0, 20); //april15DataTemp.slice(0, 20); //reorganizeData(april15DataTemp).slice(0, 20);\n\n\t\t\tconsole.log(\"april15Data\", vis.april15Data)\n\t\t\tconsole.log(\"Number of Positive Comments from first video is \", vis.march15Data.find(item => item.videoID === \"0AW21jPu-Wc\")['sentimentData'].find(item => item.analysis === \"Positive\")['count'])\n\t\t\tconsole.log(\"The categories of sentiments are \", vis.march15Data.find(item => item.videoID === \"0AW21jPu-Wc\")['sentimentData'])\n\t\t\tvar dataExp = {};\n\n\n\t\t\t//var dataExp.map(( d = )\n\t\t\t//\tNegativeSetimentCount:vis.march15Data.flatMap(videoID => [videoID['sentimentData'].find(item => item.analysis ==\"Negative\")['count']]) \n\t\t\t//} \n\t\t\t//vis.march15Data.flatMap(videoID => [videoID['sentimentData'].find(item => item.analysis ==\"Negative\")['count']])\n\n\t\t\tconsole.log(\"experimental reorg\", vis.march15Data.flatMap( a => [ a.sentimentData.map(b => [b.analysis, b.count, a.videoID] )]));//.map(c =>c.Negative)]));  //concat(a)] )); //[ a.sentimentData.concat(a)] ));\n\t\t\tconsole.log(\"experimental reorg2\", vis.march15Data[0]['sentimentData'].find(item => item.analysis ==\"Negative\")['count'])\n\t\t\tconsole.log(\"experimental reorg3\", vis.march15Data.forEach(videoID => [ videoID.negativeSentiment = videoID['sentimentData'].find(item => item.analysis ==\"Negative\")['count']] ))\n\t\t\tconsole.log(\"experimental reorg4\", vis.march15Data.flatMap(videoID => ({NegativeCount: [videoID['sentimentData'].find(item => item.analysis ==\"Negative\")['count']]})))\n\t\t\tconsole.log(\"experimental reorg5\", dataExp)\n\t\t\t//console.log(\"experimental reorg5\", vis.march15Data.flatMap( a => [ a.sentimentData.map(b => [{b.analysis: b.count}, a.videoID] )]))\n\n\t\t\tconst children = [];\n\t\t\tvis.march15Data.forEach(item => {\n\t\t\t\tconst dataExp = {\n\t\t\t\t\tvideoID: item.videoID,\n\t\t\t\t\tnegativeSentimentCount: item.sentimentData.find(item =>item.analysis ==\"Negative\")['count'],\n\t\t\t\t\tneutralSentimentCount: item.sentimentData.find(item =>item.analysis ==\"Neutral\")['count'],\n\t\t\t\t\tpositiveSentimentCount: item.sentimentData.find(item =>item.analysis ==\"Positive\")['count']\n\t\t\t\t}\n\t\t\t\tchildren.push(dataExp);\n\t\t\t})\n\t\t\tconsole.log(\"experimental reorg5\", children)\n\t\t\t//console.log(\"nexperimental reorg6\", vis.march15Data.flatMap(\n\t\t\t//\t(elem) =>elem.sentimentData\n\t\t\t//\t)\n\t\t\t//)\n\n\t\t\t//const fn = arr => arr.flatMap(({ sentimentData, ...rest }) =>\n\t\t\t//\tsentimentData.map( o => ({\n\t\t//\t\t\t...rest,\n\t\t//\t\t\t...o\n\t\t//\t\t}))\n\t\t//\t)\n\t\t\t//const DataExp2 = vis.march15Data.map(({ videoID, sentimentData }) =>\n\t\t\t//\tsentimentData.map( {o => ({\n\t\t\t//\t\t...rest,\n\t\t\t//\t\t...o\n\t\t\t//\t}))\n\t\t\t//)\n\t\t\n\t\t\t//console.log('expiremental reorg5', DataExp2)\n\n\n\t\t\t//var newData = [];\n\t\t\t//for(const videoID in vis.march15Data) {\n\t\t\t//\tnewData.push({\n\t\t\t//\t//videoTitle: videoID,\n\t\t\t//\tnegativeSentiment: vis.march15Data.map(videoID => [videoID['sentimentData'].find(item => item.analysis ==\"Negative\")['count']])\n\t\t\t//\t});\n\t\t\t//}\n\t\t\t//console.log(\"the new exp reorg4\", newData)\n\t\t\tconst data = vis.march15Data;\n\t\t\t // Determine the series that need to be stacked.\n\t\t\tconst series = d3.stack()\n\t\t\t.keys(d3.union(data.map(d => d.analysis))) // distinct series keys, in input order\n\t\t\t.value(([, D], key) => D.get(key).count) // get value for each series key and stack\n\t\t\t(d3.index(data, d => d.videoID, d => d.analysis));\n\n\t\t\t  //Prepare the scales for positional and color encodings.\n\t\t\tconst x = d3.scaleBand()\n\t\t\t.domain(d3.groupSort(data, D => -d3.sum(D, d => d.count), d => d.videoID))\n\t\t\t.range([marginLeft, WIDTH - marginRight])\n\t\t\t.padding(0.1);\n\n\t\t\tconst y = d3.scaleLinear()\n\t\t\t.domain([0, d3.max(series, d => d3.max(d, d => d[1]))])\n\t\t\t.rangeRound([HEIGHT - marginBottom, marginTop]);\n\n\t\t\tconst color = d3.scaleOrdinal()\n\t\t\t.domain(series.map(d =>d.key))\n\t\t\t.range(d3.schemeSpectral[series.length]) \n\t\t\t.unknown(\"#cc\");\n\n\t\t\t//A function to format the value in the tooltip.\n\t\t\tconst formatValue = x => isNaN(x) ? \"N/A\" : x.toLocaleString(\"en\")\n\n\t\t\t//Create the SVG container\n\t\t\tvis.svg = d3.create(\"svg\")\n\t\t\t.attr(\"width\", WIDTH)\n\t\t\t.attr(\"height\", HEIGHT)\n\t\t\t.attr(\"viewBox\", [0,0, WIDTH, HEIGHT])\n\t\t\t.attr(\"style\", \"max-width: 100%, height: auto;\");\n\n\t\t\t\n\t\t\t\n\t\t\t//Append a group for each series, and a rect for each element in the series.\n\t\t\tvis.svg.append(\"g\")\n\t\t\t.selectAll()\n\t\t\t.data(series)\n\t\t\t.join(\"g\")\n\t\t\t.attr(\"fill\", d => color(d.key))\n\t\t\t.selectAll(\"rect\")\n\t\t\t.data(D => D.map(d => (d.key = D.key, d)))\n\t\t\t.join(\"rect\")\n\t\t\t\t.attr(\"x\", d => x(d.data[0]))\n\t\t\t\t.attr(\"y\", d => y(d[1]))\n\t\t\t\t.attr(\"height\", d => y(d[0]) - y(d[1]))\n\t\t\t\t.attr(\"width\", x.bandwidth())\n\t\t\t.append(\"title\")\n\t\t\t.text(d => `${d.data[0]} ${d.key}\\n${formatValue(d.data[1].get(d.key).count)}`);\n\n\n\t\t\t //Append the horizontal axis\n\t\t\tvis.svg.append(\"g\")\n\t\t\t.attr(\"transform\", `translate(0,${HEIGHT - marginBottom})`) \n\t\t\t.call(d3.axisBottom(x).tickSizeOuter(0))\n\t\t\t.call(g => g.selectAll('.domain').remove());\n\n\t\t\t//Append the vertical axis\n\t\t\tvis.svg.append(\"g\")\n\t\t\t.attr(\"transform\", `translate($marginLeft},0)`)\n\t\t\t.call(g => g.selectAll(\".domain\").remove());\n\n\t\t// vis.update(\"march15\")\n\t\t\t\t\t})\n\t\t\t\t}\n\n\tupdate(date) {\n\t\tconst vis = this\n\n\t\t//vis.data = (date == \"march15\") ? vis.march15Data : vis.april15Data;\n\n\t\tif (date == \"march15\") vis.data = vis.march15Data\n\t\telse if (date == \"march22\") vis.data = vis.march22Data\n\t\telse if (date == \"march29\") vis.data = vis.march29Data\n\t\telse if (date == \"april05\") vis.data = vis.april05Data\n\t\telse if (date == \"april15\") vis.data = vis.april15Data\n\n\n\t\tconst month = date.slice(0, -2).charAt(0).toUpperCase() + date.slice(0, -2).slice(1) \n\t\tconst convertedDate = date.substr(date.length-2);\n\t\tconst converted_month_date = month.concat(\" \", convertedDate)\n\n\t\t//console.log(\"converted date month\", converted_month_date)\n\n\n\t\t//vis.xLabel.text(`Top Trending Videos on ${converted_month_date}`)\n\n\t\t//console.log(\"the video data\", vis.data)\n\n\t\tconst sentimentCategories = ['Negative', 'Neutral', 'Positive']\n\t\tconsole.log(\"sentimentCategories\", sentimentCategories)\n\n\t\t// Determine the series that need to be stacked.  \n\t\t//const series = d3.stack()\n\t//\t\t.keys(d3.union(vis.data.map(d=>d)))\n\t\t//console.log(\"the new data\", vis.data.map(d=>d.sentimentData).map(d=>d.analysis))\n\n\t\tconst x = d3.scaleBand()\n      \t\t.range([0, WIDTH])\n      \t\t//.domain(vis.data.map((d) => d.videoID))\n\t\t\t.domain(d3.groupSort(vis.data, D => -d3.sum(D, d => d.count), d => d.videoID))\n\t\t\t.padding(0.5)\n    \t\n\t\t// const xAxisCall = d3.axisBottom(x)\n    \n\t\t//vis.xAxisGroup.transition().duration(500).call(xAxisCall)\n      \t//\t.selectAll(\"text\")\n      \t//\t.style(\"font-size\", \"8px\")\n      \t//\t.attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n      \t//\t.style(\"text-anchor\", \"end\")\n  \n    \t//const y = d3.scaleLinear()\n        //\t.domain([\n        // \td3.min(vis.data, d => d.videoCount) *0.95, \n        //  \td3.max(vis.data, d => d.videoCount)\n        //\t])\n        //\t.range([HEIGHT, 0])\n\n\t\t//console.log(d3);\t\n\n\t\tconst series = d3.stack()\n\t\t\t.keys(d3.union(vis.data.map(d => d.analysis))) // distinct series keys, in input order\n\t\t\t.value(([, D], key) => D.get(key).count) // get value for each series key adn stack\n\t\t\t(d3.index(vis.data, d =>d.videoID, d => d.analysis));\n\n\t\tconst y = d3.scaleLinear()\n\t\t\t.domain([0, d3.max(series, d => d3.max(d, d => d[1]))]) \n\t\t\t.rangeRound([HEIGHT, 0]);\n  \n    \t//const yAxisCall = d3.axisLeft(y)\n    \t//vis.yAxisGroup.transition().duration(500).call(yAxisCall)\n    \t//console.log(\"hello again\")\n\t\t\n\t\t//color palette = one color per subgroup\n\t\tconst color = d3.scaleOrdinal()\n\t\t\t.domain(series.map(d => d.key))\n\t\t\t.range(d3.schemeSpectral[series.length])\n\t\t\t.unknown(\"#ccc\"); \n\t\t\t\n\t\tconst formatValue = x => isNaN(x) ? \"N/A\" : x.toLocaleString(\"en\")\n\n    \t// DATA JOIN\n    \tconst rects =    //Append a group for each series, and a rect for each element in the series.\n\t\tvis.svg.append(\"g\")\n\t\t  .selectAll()\n\t\t  .data(series)\n\t\t  .join(\"g\")\n\t\t  .attr(\"fill\", d => color(d.key))\n\t\t  .selectAll(\"rect\")\n\t\t  .data(D => D.map(d => (d.key = D.key, d)))\n\t\t  .join(\"rect\")\n\t\t\t.attr(\"x\", d => x(d.data[0]))\n\t\t\t.attr(\"y\", d => y(d[1]))\n\t\t\t.attr(\"height\", d => y(d[0]) - y(d[1]))\n\t\t\t.attr(\"width\", x.bandwidth())\n\t\t  .append(\"title\")\n\t\t  .text(d => `${d.data[0]} ${d.key}\\n${formatValue(d.data[1].get(d.key).count)}`);\n\n\t\t\n\n    \t// EXIT \n    \trects.exit()\n        \t.transition().duration(500)\n        \t\t.attr(\"height\", 0)\n        \t\t.attr(\"y\", HEIGHT)\n        \t\t.remove()\n\n    \t// UPDATE \n    \trects.transition().duration(500)\n      \t\t.attr(\"x\", d => x(d.videoTitle))\n      \t\t.attr(\"y\", d => y(d.videoCount))\n      \t\t.attr(\"width\", x.bandwidth)\n      \t\t.attr(\"height\", d => HEIGHT - y(d.videoCount))\n\n    \t// ENTER\n    \trects.enter().append(\"rect\")\n      \t.attr(\"x\", d => x(d.videoTitle))\n      \t.attr(\"width\", x.bandwidth)\n      \t.attr(\"fill\", \"#5f0f40\")\n      \t.attr(\"y\", HEIGHT)\n      \t.transition().duration(500)\n        \t.attr(\"height\", d => HEIGHT - y(d.videoCount))\n        \t.attr(\"y\", d => y(d.videoCount))\n\t}\n}\n\n\n\nfunction restructureData(raw_data) {\n\tvar USAVideoCount = [];\n\tfor(const videoID in raw_data['US']) {\n\t\tUSAVideoCount.push({\n\t\t\tvideoTitle: videoID,\n\t\t\tvideoCount: Number(raw_data['US'][videoID]['view_count'])\n\t\t});\n\t}\n\tUSAVideoCount = USAVideoCount.sort((a,b) => (a.videoCount < b.videoCount) ? 1: -1) \n\treturn USAVideoCount\n}\n\nfunction countPolarity(rawData){\n\tvar polarityCount = [];\n\tvar obj = {};\n\tvar countP = 0 ;\n\tvar countN = 0 ;\n\tvar countNe = 0 ;\n\tfor (const videoID in rawData['US']){\n\n\t\tfor (const user in rawData['US'][videoID]){\n\t\t\tif (rawData['US'][videoID][user]['Analysis'] == 'Positive') obj[countP] = (obj[countP] || 0) + 1\t\n\t\t\telse if (rawData['US'][videoID][user]['Analysis'] == 'Neutral') obj[countNe] = (obj[countNe] || 0) + 1\n\t\t\telse if (rawData['US'][videoID][user]['Analysis'] == 'Negative') obj[countN] = (obj[countN] || 0) + 1\n\t\t}\t\n\tpolarityCount.push({\n\t\tvideoID: videoID,\n\t\tpolarityPositive: Number(obj[countP]),\n\t\tpolarityNeutral: Number(obj[countNe]),\n\t\tpolarityNegative: Number(obj[countN])\n\t})\n\n\tcountP=0;\n\tcountN=0;\n\tcountNe=0;\n\t\t\n\treturn polarityCount \n\t}\t\n}\n\nfunction countPolarity2(rawData){\n\tfor (const videoID in rawData['US']){\n\t\tconst out = Object.values(rawData['US'][videoID].reduce((acc, {current}) => {\n\t\t\t//Destructure the properites from the current object\n\t\t\tconst {videoID, Analysis } = current;\n\t\t\t//If the object doesn't already contain an Analysis key set up a new object with\n\t\t\t// empty \n\t\t\tacc[videoID] = acc[videoID] || {videoID, Analysis : []}\n\t\t\t\n\t\t\t// Push the analysis of the current object to analysis array\n\t\t\tacc[videoID].Analysis.push(Analysis);\n\n\t\t\t// Return the accumulator for the next iteration\n\t\t\treturn acc;\n\t\t}, {})); \n\t}\n\t//return acc;\n\n}\n\nfunction restrucOrigData(rawData) {\n\tconst newData = [];\n\tfor (const videoID in rawData['US']){\n\t\tfor ( const user in rawData['US'][videoID]){\n\t\t\tnewData.push({\n\t\t\t\tvideoID: videoID,\n\t\t\t\tuser: user,\n\t\t\t\tanalysis: rawData['US'][videoID][user]['Analysis'],\n\t\t\t\tcomments: rawData['US'][videoID][user]['Comments'],\n\t\t\t\tpolarity: rawData['US'][videoID][user]['Polarity']\n\t\t\t})\n\t\t}\n\t}\n\treturn newData\n}\n\nfunction restrucNewData(rawData) {\n\tconst newData = [];\n\tfor (const videoID in rawData){\n\t\tnewData.push({\n\t\t\tvideoID: rawData['videoID'],\n\t\t\tnegative: rawData['sentimentData'].map(e => e.analysis) //['analysis']['Negative'].map(d=>d.count)\n\t\t})\n\t}\n}\n\nfunction getPolarityCount(rawData){\n\tconst res = rawData.reduce((acc, obj) => {\n\t\tconst existingIndex = acc.findIndex(\n\t\t\tel => el.videoID == obj.videoID && el.analysis == obj.analysis\n\t\t)\n\t\tif (existingIndex > -1) {\n\t\t\tacc[existingIndex].count += 1\n\t\t} else {\n\t\t\tacc.push({\n\t\t\t\tvideoID: obj.videoID,\n\t\t\t\tanalysis: obj.analysis,\n\t\t\t\tcount: 1\n\t\t\t})\n\t\t}\n\t\treturn acc\n\t}, [])\n\treturn res\n}\n\nfunction reorganizeData(polarityData) {\n\tconst result = [ ...polarityData\n\t\t.reduce((acc, {videoID, analysis, count}) => {\n\t\t\tconst group = acc.get(videoID)\n\t\t\t//group ? group.sentimentData.push({analysis, count}) : acc.set(videoID, {videoID, \"sentimentData\":[{analysis, count}]})\n\t\t\tgroup ? group.sentimentData.push({analysis, count}) : acc.set(videoID, {videoID, \"sentimentData\":[{analysis, count}]})\n\t\t\treturn acc\n\t\t}, new Map)\n\t\t.values()\n\t]\n\treturn result \n\t}\n\n/*\nfunction countPolarity2(rawData){\n\tvar polarityCount = [];\n\tvar temp = [rawData[0]];\n\tfor (const index = 1; index < rawData.length; index++){  //videoID in rawData['US']){\n\t\tfor (const  subindex = 1; subindex < index.length; subindex++){ //user in rawData['US'][videoID]){\n\t\t\tif ( rawData[index][subindex] == rawData[index -1][subindex -1] + 1) { //rawData['US'][videoID][user]['Analysis'] == 'Positive'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countP += 1\n\t\t\t\t})\n\t\t\t} else \n\t\t\tif (rawData['US'][videoID][user]['Analysis'] == 'Neutral'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countN += 1\n\t\t\t\t})\n\t\t\t} else \n\t\t\tif (rawData['US'][videoID][user]['Analysis'] == 'Negative'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countNe += 1\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\treturn polarityCount \n}\n*/\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}