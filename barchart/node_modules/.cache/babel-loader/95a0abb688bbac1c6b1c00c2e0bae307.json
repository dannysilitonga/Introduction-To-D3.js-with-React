{"ast":null,"code":"import * as d3 from 'd3';\nconst MARGIN = {\n  TOP: 30,\n  BOTTOM: 300,\n  LEFT: 90,\n  RIGHT: 30\n};\nconst WIDTH = 860 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 800 - MARGIN.TOP - MARGIN.BOTTOM;\nexport default class D3Chart {\n  constructor(element) {\n    const vis = this;\n    vis.svg = d3.select(element).append(\"svg\").attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT).attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM).append(\"g\").attr(\"transform\", \"translate(\".concat(MARGIN.LEFT, \", \").concat(MARGIN.TOP, \")\"));\n    vis.xLabel = vis.svg.append(\"text\").attr(\"x\", WIDTH / 2).attr(\"y\", HEIGHT + 80).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"19px\");\n    vis.svg.append(\"text\").attr(\"x\", -(HEIGHT / 2)).attr(\"y\", -75).attr(\"text-anchor\", \"middle\").text(\"Number of Views\").attr(\"transform\", \"rotate(-90)\");\n    vis.xAxisGroup = vis.svg.append(\"g\").attr(\"transform\", \"translate(0, \".concat(HEIGHT, \")\"));\n    vis.yAxisGroup = vis.svg.append(\"g\");\n    Promise.all([d3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_15_03.json\"), d3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_22_03.json\"), d3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_29_03.json\"), d3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_05_04.json\"), d3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_15_04.json\")]).then(datasets => {\n      console.log(datasets[0]['US']);\n      var polarityCount = countPolarity(datasets[0]);\n      console.log(\"the polarity count is\", polarityCount);\n\n      //const march15DataTemp2 = countPolarity(datasets[0])\n      //const march22DataTemp2 = countPolarity(datasets[1])\n      //const march29DataTemp2 = countPolarity(datasets[2])\n      //const april05DataTemp2 = countPolarity(datasets[3])\n      //const april15DataTemp2 = countPolarity(datasets[4])\n      //console.log(\"the march polarity data\", march15DataTemp2)\n\n      const march15DataRestructured = restrucOrigData(datasets[0]);\n      const march15DataTemp = getPolarityCount(march15DataRestructured);\n      const march22DataRestructured = restrucOrigData(datasets[1]);\n      const march22DataTemp = getPolarityCount(march22DataRestructured);\n      const march29DataRestructured = restrucOrigData(datasets[2]);\n      const march29DataTemp = getPolarityCount(march29DataRestructured);\n      const april05DataRestructured = restrucOrigData(datasets[3]);\n      const april05DataTemp = getPolarityCount(april05DataRestructured);\n      const april15DataRestructured = restrucOrigData(datasets[4]);\n      const april15DataTemp = getPolarityCount(april15DataRestructured);\n      console.log(\"march 15 Data\", march15DataTemp);\n      vis.march15Data = reorganizeData(march15DataTemp).slice(0, 20); // march15DataTemp.slice(0, 20); //\n      vis.march22Data = reorganizeData(march22DataTemp).slice(0, 20); //march22DataTemp.slice(0, 20); //\n      vis.march29Data = reorganizeData(march29DataTemp).slice(0, 20); //march29DataTemp.slice(0, 20); //reorganizeData(march29DataTemp).slice(0, 20);\n      vis.april05Data = reorganizeData(april05DataTemp).slice(0, 20); //april05DataTemp.slice(0, 20); // reorganizeData(april05DataTemp).slice(0, 20);\n      vis.april15Data = reorganizeData(april15DataTemp).slice(0, 20); //april15DataTemp.slice(0, 20); //reorganizeData(april15DataTemp).slice(0, 20);\n\n      console.log(\"april15Data\", vis.april15Data);\n      //console.log(\"Number of Positive Comments from first video is \", vis.march15Data.find(item => item.videoID === \"0AW21jPu-Wc\")['sentimentData'].find(item => item.analysis === \"Positive\")['count'])\n      //console.log(\"The categories of sentiments are \", vis.march15Data.find(item => item.videoID === \"0AW21jPu-Wc\")['sentimentData'])\n\n      console.log(\"experimental reorg\", vis.march15Data.flatMap(a => [a.sentimentData.map(b => [b.analysis, b.count])])); //.map(c =>c.Negative)]));  //concat(a)] )); //[ a.sentimentData.concat(a)] ));\n      console.log(\"experimental reorg2\", vis.march15Data[0]['sentimentData'].find(item => item.analysis == \"Negative\")['count']);\n      console.log(\"experimental reorg3\", vis.march15Data.forEach(videoID => [videoID.negativeSentiment = videoID['sentimentData'].find(item => item.analysis == \"Negative\")['count']]));\n      var newData = [];\n      for (const videoID in vis.march15Data) {\n        newData.push({\n          //videoTitle: videoID,\n          negativeSentiment: vis.march15Data.map(videoID => [videoID['sentimentData'].find(item => item.analysis == \"Negative\")['count']])\n        });\n      }\n      console.log(\"the new exp reorg4\", newData);\n      vis.update(\"march15\");\n    });\n  }\n  update(date) {\n    const vis = this;\n\n    //vis.data = (date == \"march15\") ? vis.march15Data : vis.april15Data;\n\n    if (date == \"march15\") vis.data = vis.march15Data;else if (date == \"march22\") vis.data = vis.march22Data;else if (date == \"march29\") vis.data = vis.march29Data;else if (date == \"april05\") vis.data = vis.april05Data;else if (date == \"april15\") vis.data = vis.april15Data;\n    const month = date.slice(0, -2).charAt(0).toUpperCase() + date.slice(0, -2).slice(1);\n    const convertedDate = date.substr(date.length - 2);\n    const converted_month_date = month.concat(\" \", convertedDate);\n\n    //console.log(\"converted date month\", converted_month_date)\n\n    vis.xLabel.text(\"Top Trending Videos on \".concat(converted_month_date));\n    console.log(\"the video data\", vis.data);\n    const sentimentCategories = ['Negative', 'Neutral', 'Positive'];\n    console.log(\"sentimentCategories\", sentimentCategories);\n\n    // Determine the series that need to be stacked.  \n    //const series = d3.stack()\n    //\t\t.keys(d3.union(vis.data.map(d=>d)))\n    console.log(\"the new data\", vis.data.map(d => d.sentimentData).map(d => d.analysis));\n    const x = d3.scaleBand().range([0, WIDTH]).domain(vis.data.map(d => d.videoID)).padding(0.5);\n    const xAxisCall = d3.axisBottom(x);\n    vis.xAxisGroup.transition().duration(500).call(xAxisCall).selectAll(\"text\").style(\"font-size\", \"8px\").attr(\"transform\", \"translate(-10,0)rotate(-45)\").style(\"text-anchor\", \"end\");\n    const y = d3.scaleLinear().domain([d3.min(vis.data, d => d.videoCount) * 0.95, d3.max(vis.data, d => d.videoCount)]).range([HEIGHT, 0]);\n    const yAxisCall = d3.axisLeft(y);\n    vis.yAxisGroup.transition().duration(500).call(yAxisCall);\n    console.log(\"hello again\");\n\n    //color palette = one color per subgroup\n    const color = d3.scaleOrdinal().domain(sentimentCategories).range(['#e41a1c', '#377eb8', '#4daf4a']);\n\n    // DATA JOIN\n    const rects = vis.svg.selectAll(\"rect\").data(vis.data);\n    const stackData = d3.stack().keys(sentimentCategories)(vis.data);\n\n    // EXIT \n    rects.exit().transition().duration(500).attr(\"height\", 0).attr(\"y\", HEIGHT).remove();\n\n    // UPDATE \n    rects.transition().duration(500).attr(\"x\", d => x(d.videoTitle)).attr(\"y\", d => y(d.videoCount)).attr(\"width\", x.bandwidth).attr(\"height\", d => HEIGHT - y(d.videoCount));\n\n    // ENTER\n    rects.enter().append(\"rect\").attr(\"x\", d => x(d.videoTitle)).attr(\"width\", x.bandwidth).attr(\"fill\", \"#5f0f40\").attr(\"y\", HEIGHT).transition().duration(500).attr(\"height\", d => HEIGHT - y(d.videoCount)).attr(\"y\", d => y(d.videoCount));\n  }\n}\nfunction restructureData(raw_data) {\n  var USAVideoCount = [];\n  for (const videoID in raw_data['US']) {\n    USAVideoCount.push({\n      videoTitle: videoID,\n      videoCount: Number(raw_data['US'][videoID]['view_count'])\n    });\n  }\n  USAVideoCount = USAVideoCount.sort((a, b) => a.videoCount < b.videoCount ? 1 : -1);\n  return USAVideoCount;\n}\nfunction countPolarity(rawData) {\n  var polarityCount = [];\n  var obj = {};\n  var countP = 0;\n  var countN = 0;\n  var countNe = 0;\n  for (const videoID in rawData['US']) {\n    for (const user in rawData['US'][videoID]) {\n      if (rawData['US'][videoID][user]['Analysis'] == 'Positive') obj[countP] = (obj[countP] || 0) + 1;else if (rawData['US'][videoID][user]['Analysis'] == 'Neutral') obj[countNe] = (obj[countNe] || 0) + 1;else if (rawData['US'][videoID][user]['Analysis'] == 'Negative') obj[countN] = (obj[countN] || 0) + 1;\n    }\n    polarityCount.push({\n      videoID: videoID,\n      polarityPositive: Number(obj[countP]),\n      polarityNeutral: Number(obj[countNe]),\n      polarityNegative: Number(obj[countN])\n    });\n    countP = 0;\n    countN = 0;\n    countNe = 0;\n    return polarityCount;\n  }\n}\nfunction countPolarity2(rawData) {\n  for (const videoID in rawData['US']) {\n    const out = Object.values(rawData['US'][videoID].reduce((acc, _ref) => {\n      let {\n        current\n      } = _ref;\n      //Destructure the properites from the current object\n      const {\n        videoID,\n        Analysis\n      } = current;\n      //If the object doesn't already contain an Analysis key set up a new object with\n      // empty \n      acc[videoID] = acc[videoID] || {\n        videoID,\n        Analysis: []\n      };\n\n      // Push the analysis of the current object to analysis array\n      acc[videoID].Analysis.push(Analysis);\n\n      // Return the accumulator for the next iteration\n      return acc;\n    }, {}));\n  }\n  //return acc;\n}\nfunction restrucOrigData(rawData) {\n  const newData = [];\n  for (const videoID in rawData['US']) {\n    for (const user in rawData['US'][videoID]) {\n      newData.push({\n        videoID: videoID,\n        user: user,\n        analysis: rawData['US'][videoID][user]['Analysis'],\n        comments: rawData['US'][videoID][user]['Comments'],\n        polarity: rawData['US'][videoID][user]['Polarity']\n      });\n    }\n  }\n  return newData;\n}\nfunction restrucNewData(rawData) {\n  const newData = [];\n  for (const videoID in rawData) {\n    newData.push({\n      videoID: rawData['videoID'],\n      negative: rawData['sentimentData'].map(e => e.analysis) //['analysis']['Negative'].map(d=>d.count)\n    });\n  }\n}\nfunction getPolarityCount(rawData) {\n  const res = rawData.reduce((acc, obj) => {\n    const existingIndex = acc.findIndex(el => el.videoID == obj.videoID && el.analysis == obj.analysis);\n    if (existingIndex > -1) {\n      acc[existingIndex].count += 1;\n    } else {\n      acc.push({\n        videoID: obj.videoID,\n        analysis: obj.analysis,\n        count: 1\n      });\n    }\n    return acc;\n  }, []);\n  return res;\n}\nfunction reorganizeData(polarityData) {\n  const result = [...polarityData.reduce((acc, _ref2) => {\n    let {\n      videoID,\n      analysis,\n      count\n    } = _ref2;\n    const group = acc.get(videoID);\n    //group ? group.sentimentData.push({analysis, count}) : acc.set(videoID, {videoID, \"sentimentData\":[{analysis, count}]})\n    group ? group.sentimentData.push({\n      analysis,\n      count\n    }) : acc.set(videoID, {\n      videoID,\n      analysis,\n      count\n    });\n    return acc;\n  }, new Map()).values()];\n  return result;\n}\n\n/*\nfunction countPolarity2(rawData){\n\tvar polarityCount = [];\n\tvar temp = [rawData[0]];\n\tfor (const index = 1; index < rawData.length; index++){  //videoID in rawData['US']){\n\t\tfor (const  subindex = 1; subindex < index.length; subindex++){ //user in rawData['US'][videoID]){\n\t\t\tif ( rawData[index][subindex] == rawData[index -1][subindex -1] + 1) { //rawData['US'][videoID][user]['Analysis'] == 'Positive'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countP += 1\n\t\t\t\t})\n\t\t\t} else \n\t\t\tif (rawData['US'][videoID][user]['Analysis'] == 'Neutral'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countN += 1\n\t\t\t\t})\n\t\t\t} else \n\t\t\tif (rawData['US'][videoID][user]['Analysis'] == 'Negative'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countNe += 1\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\treturn polarityCount \n}\n*/","map":{"version":3,"names":["d3","MARGIN","TOP","BOTTOM","LEFT","RIGHT","WIDTH","HEIGHT","D3Chart","constructor","element","vis","svg","select","append","attr","concat","xLabel","style","text","xAxisGroup","yAxisGroup","Promise","all","json","then","datasets","console","log","polarityCount","countPolarity","march15DataRestructured","restrucOrigData","march15DataTemp","getPolarityCount","march22DataRestructured","march22DataTemp","march29DataRestructured","march29DataTemp","april05DataRestructured","april05DataTemp","april15DataRestructured","april15DataTemp","march15Data","reorganizeData","slice","march22Data","march29Data","april05Data","april15Data","flatMap","a","sentimentData","map","b","analysis","count","find","item","forEach","videoID","negativeSentiment","newData","push","update","date","data","month","charAt","toUpperCase","convertedDate","substr","length","converted_month_date","sentimentCategories","d","x","scaleBand","range","domain","padding","xAxisCall","axisBottom","transition","duration","call","selectAll","y","scaleLinear","min","videoCount","max","yAxisCall","axisLeft","color","scaleOrdinal","rects","stackData","stack","keys","exit","remove","videoTitle","bandwidth","enter","restructureData","raw_data","USAVideoCount","Number","sort","rawData","obj","countP","countN","countNe","user","polarityPositive","polarityNeutral","polarityNegative","countPolarity2","out","Object","values","reduce","acc","_ref","current","Analysis","comments","polarity","restrucNewData","negative","e","res","existingIndex","findIndex","el","polarityData","result","_ref2","group","get","set","Map"],"sources":["/workspace/Introduction-To-D3.js-with-React/barchart/src/D3Stacked.js"],"sourcesContent":["import * as d3 from 'd3'\n\nconst MARGIN = { TOP: 30, BOTTOM: 300, LEFT: 90, RIGHT: 30 }\nconst WIDTH = 860 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 800 - MARGIN.TOP - MARGIN.BOTTOM;\n\nexport default class D3Chart {\n\tconstructor(element) {\n\t\tconst vis = this\n\n\t\tvis.svg = d3.select(element)\n\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n\t\t\t\t.attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n\t\t\t.append(\"g\")\n\t\t\t\t.attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n\t\tvis.xLabel = vis.svg.append(\"text\")\n\t\t\t.attr(\"x\", WIDTH / 2)\n\t\t\t.attr(\"y\", HEIGHT + 80)\n\t\t\t.attr(\"text-anchor\", \"middle\")\n\t\t\t.style(\"font-size\", \"19px\")\n\n\t\tvis.svg.append(\"text\")\n\t\t\t.attr(\"x\", -(HEIGHT / 2))\n\t\t\t.attr(\"y\", -75)\n\t\t\t.attr(\"text-anchor\", \"middle\")\n\t\t\t.text(\"Number of Views\")\n\t\t\t.attr(\"transform\", \"rotate(-90)\")\n\n\t\tvis.xAxisGroup = vis.svg.append(\"g\")\n\t\t\t.attr(\"transform\", `translate(0, ${HEIGHT})`)\n\n\t\tvis.yAxisGroup = vis.svg.append(\"g\")\n\n\t\tPromise.all([\n\t\t\td3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_15_03.json\"),\n\t\t\td3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_22_03.json\"),\n\t\t\td3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_29_03.json\"),\n\t\t\td3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_05_04.json\"),\n\t\t\td3.json(\"https://sentimentviz-default-rtdb.firebaseio.com/sentiments_24_15_04.json\")\n\t\t]).then((datasets) => {\n\t\t\tconsole.log(datasets[0]['US'])\n\n\t\t\tvar polarityCount = countPolarity(datasets[0])\n\t\t\tconsole.log(\"the polarity count is\", polarityCount);\n\t\t\t\n\t\t\t//const march15DataTemp2 = countPolarity(datasets[0])\n\t\t\t//const march22DataTemp2 = countPolarity(datasets[1])\n\t\t\t//const march29DataTemp2 = countPolarity(datasets[2])\n\t\t\t//const april05DataTemp2 = countPolarity(datasets[3])\n\t\t\t//const april15DataTemp2 = countPolarity(datasets[4])\n\t\t\t//console.log(\"the march polarity data\", march15DataTemp2)\n\n\n\t\t\tconst march15DataRestructured = restrucOrigData(datasets[0])\n\t\t\tconst march15DataTemp = getPolarityCount(march15DataRestructured)\n\n\t\t\tconst march22DataRestructured = restrucOrigData(datasets[1])\n\t\t\tconst march22DataTemp = getPolarityCount(march22DataRestructured)\n\n\t\t\tconst march29DataRestructured = restrucOrigData(datasets[2])\n\t\t\tconst march29DataTemp = getPolarityCount(march29DataRestructured)\n\n\t\t\tconst april05DataRestructured = restrucOrigData(datasets[3])\n\t\t\tconst april05DataTemp = getPolarityCount(april05DataRestructured)\n\n\t\t\tconst april15DataRestructured = restrucOrigData(datasets[4])\n\t\t\tconst april15DataTemp = getPolarityCount(april15DataRestructured)\n\n\n\t\t\tconsole.log(\"march 15 Data\", march15DataTemp)\n\n\t\t\tvis.march15Data = reorganizeData(march15DataTemp).slice(0, 20); // march15DataTemp.slice(0, 20); //\n\t\t\tvis.march22Data = reorganizeData(march22DataTemp).slice(0, 20); //march22DataTemp.slice(0, 20); //\n\t\t\tvis.march29Data = reorganizeData(march29DataTemp).slice(0, 20); //march29DataTemp.slice(0, 20); //reorganizeData(march29DataTemp).slice(0, 20);\n\t\t\tvis.april05Data = reorganizeData(april05DataTemp).slice(0, 20); //april05DataTemp.slice(0, 20); // reorganizeData(april05DataTemp).slice(0, 20);\n\t\t\tvis.april15Data = reorganizeData(april15DataTemp).slice(0, 20); //april15DataTemp.slice(0, 20); //reorganizeData(april15DataTemp).slice(0, 20);\n\n\t\t\tconsole.log(\"april15Data\", vis.april15Data)\n\t\t\t//console.log(\"Number of Positive Comments from first video is \", vis.march15Data.find(item => item.videoID === \"0AW21jPu-Wc\")['sentimentData'].find(item => item.analysis === \"Positive\")['count'])\n\t\t\t//console.log(\"The categories of sentiments are \", vis.march15Data.find(item => item.videoID === \"0AW21jPu-Wc\")['sentimentData'])\n\n\t\t\tconsole.log(\"experimental reorg\", vis.march15Data.flatMap( a => [ a.sentimentData.map(b => [b.analysis, b.count] )]));//.map(c =>c.Negative)]));  //concat(a)] )); //[ a.sentimentData.concat(a)] ));\n\t\t\tconsole.log(\"experimental reorg2\", vis.march15Data[0]['sentimentData'].find(item => item.analysis ==\"Negative\")['count'])\n\t\t\tconsole.log(\"experimental reorg3\", vis.march15Data.forEach(videoID => [ videoID.negativeSentiment = videoID['sentimentData'].find(item => item.analysis ==\"Negative\")['count']] ))\n\t\t\t\n\t\t\tvar newData = [];\n\t\t\tfor(const videoID in vis.march15Data) {\n\t\t\t\tnewData.push({\n\t\t\t\t//videoTitle: videoID,\n\t\t\t\tnegativeSentiment: vis.march15Data.map(videoID => [videoID['sentimentData'].find(item => item.analysis ==\"Negative\")['count']])\n\t\t\t\t});\n\t\t\t}\n\t\t\tconsole.log(\"the new exp reorg4\", newData)\n\t\t\t\n\t\t\n\n\t\t\tvis.update(\"march15\")\n\t\t})\n\t}\n\n\tupdate(date) {\n\t\tconst vis = this\n\n\t\t//vis.data = (date == \"march15\") ? vis.march15Data : vis.april15Data;\n\n\t\tif (date == \"march15\") vis.data = vis.march15Data\n\t\telse if (date == \"march22\") vis.data = vis.march22Data\n\t\telse if (date == \"march29\") vis.data = vis.march29Data\n\t\telse if (date == \"april05\") vis.data = vis.april05Data\n\t\telse if (date == \"april15\") vis.data = vis.april15Data\n\n\n\t\tconst month = date.slice(0, -2).charAt(0).toUpperCase() + date.slice(0, -2).slice(1) \n\t\tconst convertedDate = date.substr(date.length-2);\n\t\tconst converted_month_date = month.concat(\" \", convertedDate)\n\n\t\t//console.log(\"converted date month\", converted_month_date)\n\n\n\t\tvis.xLabel.text(`Top Trending Videos on ${converted_month_date}`)\n\n\t\tconsole.log(\"the video data\", vis.data)\n\n\t\tconst sentimentCategories = ['Negative', 'Neutral', 'Positive']\n\t\tconsole.log(\"sentimentCategories\", sentimentCategories)\n\n\t\t// Determine the series that need to be stacked.  \n\t\t//const series = d3.stack()\n\t//\t\t.keys(d3.union(vis.data.map(d=>d)))\n\t\tconsole.log(\"the new data\", vis.data.map(d=>d.sentimentData).map(d=>d.analysis))\n\n\t\tconst x = d3.scaleBand()\n      \t\t.range([0, WIDTH])\n      \t\t.domain(vis.data.map((d) => d.videoID))\n\t\t\t.padding(0.5)\n    \t\n\t\tconst xAxisCall = d3.axisBottom(x)\n    \n\t\tvis.xAxisGroup.transition().duration(500).call(xAxisCall)\n      \t\t.selectAll(\"text\")\n      \t\t.style(\"font-size\", \"8px\")\n      \t\t.attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n      \t\t.style(\"text-anchor\", \"end\")\n  \n    \tconst y = d3.scaleLinear()\n        \t.domain([\n          \td3.min(vis.data, d => d.videoCount) *0.95, \n          \td3.max(vis.data, d => d.videoCount)\n        \t])\n        \t.range([HEIGHT, 0])\n  \n    \tconst yAxisCall = d3.axisLeft(y)\n    \tvis.yAxisGroup.transition().duration(500).call(yAxisCall)\n    \tconsole.log(\"hello again\")\n\t\t\n\t\t//color palette = one color per subgroup\n\t\tconst color = d3.scaleOrdinal()\n\t\t\t.domain(sentimentCategories)\n\t\t\t.range(['#e41a1c','#377eb8','#4daf4a'])\n\t\t\t\n\n    \t// DATA JOIN\n    \tconst rects = vis.svg.selectAll(\"rect\")\n      \t\t.data(vis.data)\n\n\t\tconst stackData = d3.stack()\n\t\t\t.keys(sentimentCategories)\n\t\t\t(vis.data)\n\n    \t// EXIT \n    \trects.exit()\n        \t.transition().duration(500)\n        \t\t.attr(\"height\", 0)\n        \t\t.attr(\"y\", HEIGHT)\n        \t\t.remove()\n\n    \t// UPDATE \n    \trects.transition().duration(500)\n      \t\t.attr(\"x\", d => x(d.videoTitle))\n      \t\t.attr(\"y\", d => y(d.videoCount))\n      \t\t.attr(\"width\", x.bandwidth)\n      \t\t.attr(\"height\", d => HEIGHT - y(d.videoCount))\n\n    \t// ENTER\n    \trects.enter().append(\"rect\")\n      \t.attr(\"x\", d => x(d.videoTitle))\n      \t.attr(\"width\", x.bandwidth)\n      \t.attr(\"fill\", \"#5f0f40\")\n      \t.attr(\"y\", HEIGHT)\n      \t.transition().duration(500)\n        \t.attr(\"height\", d => HEIGHT - y(d.videoCount))\n        \t.attr(\"y\", d => y(d.videoCount))\n\t}\n}\n\n\n\nfunction restructureData(raw_data) {\n\tvar USAVideoCount = [];\n\tfor(const videoID in raw_data['US']) {\n\t\tUSAVideoCount.push({\n\t\t\tvideoTitle: videoID,\n\t\t\tvideoCount: Number(raw_data['US'][videoID]['view_count'])\n\t\t});\n\t}\n\tUSAVideoCount = USAVideoCount.sort((a,b) => (a.videoCount < b.videoCount) ? 1: -1) \n\treturn USAVideoCount\n}\n\nfunction countPolarity(rawData){\n\tvar polarityCount = [];\n\tvar obj = {};\n\tvar countP = 0 ;\n\tvar countN = 0 ;\n\tvar countNe = 0 ;\n\tfor (const videoID in rawData['US']){\n\n\t\tfor (const user in rawData['US'][videoID]){\n\t\t\tif (rawData['US'][videoID][user]['Analysis'] == 'Positive') obj[countP] = (obj[countP] || 0) + 1\t\n\t\t\telse if (rawData['US'][videoID][user]['Analysis'] == 'Neutral') obj[countNe] = (obj[countNe] || 0) + 1\n\t\t\telse if (rawData['US'][videoID][user]['Analysis'] == 'Negative') obj[countN] = (obj[countN] || 0) + 1\n\t\t}\t\n\tpolarityCount.push({\n\t\tvideoID: videoID,\n\t\tpolarityPositive: Number(obj[countP]),\n\t\tpolarityNeutral: Number(obj[countNe]),\n\t\tpolarityNegative: Number(obj[countN])\n\t})\n\n\tcountP=0;\n\tcountN=0;\n\tcountNe=0;\n\t\t\n\treturn polarityCount \n\t}\t\n}\n\nfunction countPolarity2(rawData){\n\tfor (const videoID in rawData['US']){\n\t\tconst out = Object.values(rawData['US'][videoID].reduce((acc, {current}) => {\n\t\t\t//Destructure the properites from the current object\n\t\t\tconst {videoID, Analysis } = current;\n\t\t\t//If the object doesn't already contain an Analysis key set up a new object with\n\t\t\t// empty \n\t\t\tacc[videoID] = acc[videoID] || {videoID, Analysis : []}\n\t\t\t\n\t\t\t// Push the analysis of the current object to analysis array\n\t\t\tacc[videoID].Analysis.push(Analysis);\n\n\t\t\t// Return the accumulator for the next iteration\n\t\t\treturn acc;\n\t\t}, {})); \n\t}\n\t//return acc;\n\n}\n\nfunction restrucOrigData(rawData) {\n\tconst newData = [];\n\tfor (const videoID in rawData['US']){\n\t\tfor ( const user in rawData['US'][videoID]){\n\t\t\tnewData.push({\n\t\t\t\tvideoID: videoID,\n\t\t\t\tuser: user,\n\t\t\t\tanalysis: rawData['US'][videoID][user]['Analysis'],\n\t\t\t\tcomments: rawData['US'][videoID][user]['Comments'],\n\t\t\t\tpolarity: rawData['US'][videoID][user]['Polarity']\n\t\t\t})\n\t\t}\n\t}\n\treturn newData\n}\n\nfunction restrucNewData(rawData) {\n\tconst newData = [];\n\tfor (const videoID in rawData){\n\t\tnewData.push({\n\t\t\tvideoID: rawData['videoID'],\n\t\t\tnegative: rawData['sentimentData'].map(e => e.analysis) //['analysis']['Negative'].map(d=>d.count)\n\t\t})\n\t}\n}\n\nfunction getPolarityCount(rawData){\n\tconst res = rawData.reduce((acc, obj) => {\n\t\tconst existingIndex = acc.findIndex(\n\t\t\tel => el.videoID == obj.videoID && el.analysis == obj.analysis\n\t\t)\n\t\tif (existingIndex > -1) {\n\t\t\tacc[existingIndex].count += 1\n\t\t} else {\n\t\t\tacc.push({\n\t\t\t\tvideoID: obj.videoID,\n\t\t\t\tanalysis: obj.analysis,\n\t\t\t\tcount: 1\n\t\t\t})\n\t\t}\n\t\treturn acc\n\t}, [])\n\treturn res\n}\n\nfunction reorganizeData(polarityData) {\n\tconst result = [ ...polarityData\n\t\t.reduce((acc, {videoID, analysis, count}) => {\n\t\t\tconst group = acc.get(videoID)\n\t\t\t//group ? group.sentimentData.push({analysis, count}) : acc.set(videoID, {videoID, \"sentimentData\":[{analysis, count}]})\n\t\t\tgroup ? group.sentimentData.push({analysis, count}) : acc.set(videoID, {videoID, analysis, count})\n\t\t\treturn acc\n\t\t}, new Map)\n\t\t.values()\n\t]\n\treturn result \n\t}\n\n/*\nfunction countPolarity2(rawData){\n\tvar polarityCount = [];\n\tvar temp = [rawData[0]];\n\tfor (const index = 1; index < rawData.length; index++){  //videoID in rawData['US']){\n\t\tfor (const  subindex = 1; subindex < index.length; subindex++){ //user in rawData['US'][videoID]){\n\t\t\tif ( rawData[index][subindex] == rawData[index -1][subindex -1] + 1) { //rawData['US'][videoID][user]['Analysis'] == 'Positive'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countP += 1\n\t\t\t\t})\n\t\t\t} else \n\t\t\tif (rawData['US'][videoID][user]['Analysis'] == 'Neutral'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countN += 1\n\t\t\t\t})\n\t\t\t} else \n\t\t\tif (rawData['US'][videoID][user]['Analysis'] == 'Negative'){\n\t\t\t\tpolarityCount.push({\n\t\t\t\t\tvideoID: videoID,\n\t\t\t\t\tpolarityPositive: countNe += 1\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\treturn polarityCount \n}\n*/\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}